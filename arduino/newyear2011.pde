/**
 * ライデン年賀サイト
 */

unsigned int *current_pattern = NULL;
int current_point = 0;  // 配列内の位置
int current_size = 0;   // 配列のサイズ
unsigned int last_pattern = 0;

#define XTARGET_1 1
#define XTARGET_2 2
#define XTARGET XTARGET_1

/*
 * idle 何もしてない
 * A    回転中
 * B    ちょっかいボタン
 */

#if (XTARGET == XTARGET_1)  /* 赤LED用Arduino */
/* 何もしていないときのパターン */
unsigned int pattern_idle[] = {
  B00000001,
  B00000001,
  B00000001,
  B00000001,
  B00000001,
  B00000001,

  B00000010,
  B00000010,
  B00000010,
  B00000010,
  B00000010,
  B00000010,

  B00000100,
  B00000100,
  B00000100,
  B00000100,
  B00000100,
  B00000100,

  B00001000,
  B00001000,
  B00001000,
  B00001000,
  B00001000,
  B00001000,

  B00010000,
  B00010000,
  B00010000,
  B00010000,
  B00010000,
  B00010000,

  B00100000,
  B00100000,
  B00100000,
  B00100000,
  B00100000,
  B00100000,

  B01000000,
  B01000000,
  B01000000,
  B01000000,
  B01000000,
  B01000000,

  B10000000,
  B10000000,
  B10000000,
  B10000000,
  B10000000,
  B10000000,
};

/* ルーレット回転 */
unsigned int pattern_a[] = {
  B00000001,
  B00000010,
  B00000100,
  B00001000,
  B00010000,
  B00100000,
  B01000000,
  B10000000,
  
  B00000001,
  B00000010,
  B00000100,
  B00001000,
  B00010000,
  B00100000,
  B01000000,
  B10000000,
  
  B00000001,
  B00000010,
  B00000100,
  B00001000,
  B00010000,
  B00100000,
  B01000000,
  B10000000,
  
  B00000001,
  B00000010,
  B00000100,
  B00001000,
  B00010000,
  B00100000,
  B01000000,
  B10000000,
  
  B00000001,
  B00000010,
  B00000100,
  B00001000,
  B00010000,
  B00100000,
  B01000000,
  B10000000,
  
  B00000001,
  B00000010,
  B00000100,
  B00001000,
  B00010000,
  B00100000,
  B01000000,
  B10000000,
  
  B00000001,
  B00000010,
  B00000100,
  B00001000,
  B00010000,
  B00100000,
  B01000000,
  B10000000,
  
  B00000001,
  B00000010,
  B00000100,
  B00001000,
  B00010000,
  B00100000,
  B01000000,
  B10000000,
  
  B00000001,
  B00000010,
  B00000100,
  B00001000,
  B00010000,
  B00100000,
  B01000000,
  B10000000,
  
  B00000001,
  B00000010,
  B00000100,
  B00001000,
  B00010000,
  B00100000,
  B01000000,
  B10000000,
  
  B00000001,
  B00000010,
  B00000100,
  B00001000,
  B00010000,
  B00100000,
  B01000000,
  B10000000,
  
  B00000001,
  B00000010,
  B00000100,
  B00001000,
  B00010000,
  B00100000,
  B01000000,
  B10000000,
  
  B00000001,
  B00000010,
  B00000100,
  B00001000,
  B00010000,
  B00100000,
  B01000000,
  B10000000,
  
};

/* 結果が出たー */
unsigned int pattern_b[] = {
  B11111111,
  B11111111,
  B11111111,
  B00000000,
  B00000000,
  
  B11111111,
  B11111111,
  B11111111,
  B00000000,
  B00000000,
  
  B11111111,
  B11111111,
  B11111111,
  B00000000,
  B00000000,
  
  B11111111,
  B11111111,
  B11111111,
  B00000000,
  B00000000,
  
  B11111111,
  B11111111,
  B11111111,
  B00000000,
  B00000000,
  
  B11111111,
  B11111111,
  B11111111,
  B00000000,
  B00000000,
  
  B11111111,
  B11111111,
  B11111111,
  B00000000,
  B00000000,
  
  B11111111,
  B11111111,
  B11111111,
  B00000000,
  B00000000,
  
  B11111111,
  B11111111,
  B11111111,
  B00000000,
  B00000000,
  
  B11111111,
  B11111111,
  B11111111,
  B00000000,
  B00000000,
  
  B11111111,
  B11111111,
  B11111111,
  B00000000,
  B00000000,
  
  B11111111,
  B11111111,
  B11111111,
  B00000000,
  B00000000,
  
  B11111111,
  B11111111,
  B11111111,
  B00000000,
  B00000000,
  
  B11111111,
  B11111111,
  B11111111,
  B00000000,
  B00000000,
  
  B11111111,
  B11111111,
  B11111111,
  B00000000,
  B00000000,

};

/* ちょっかいボタン */
unsigned int pattern_c[] = {
  B11111111,
  B11111111,

 // ３回回ってパッ
  B00000001,
  B00000010,
  B00000100,
  B00001000,
  B00010000,
  B00100000,
  B01000000,
  B10000000,
  B00000001,
  B00000010,
  B00000100,
  B00001000,
  B00010000,
  B00100000,
  B01000000,
  B10000000,
  B00000001,
  B00000010,
  B00000100,
  B00001000,
  B00010000,
  B00100000,
  B01000000,
  B10000000,
  B00000001,
  B00000000,
  B11111111,
  B00000000,

  // 上下動３回してパッ
  B00000001,
  B10000010,
  B01000100,
  B00101000,
  B00010000,
  B00101000,
  B01000100,
  B10000010,
  B00000001,
  B10000010,
  B01000100,
  B00101000,
  B00010000,
  B00101000,
  B01000100,
  B10000010,
  B00000001,
  B10000010,
  B01000100,
  B00101000,
  B00010000,
  B00101000,
  B01000100,
  B10000010,
  B00000001,
  B00000000,
  B11111111,
  B00000000,

  // 正転・逆転してパッ
  B00000001,
  B00000010,
  B00000100,
  B00001000,
  B00010000,
  B00100000,
  B01000000,
  B10000000,
  B00000001,
  B10000000,
  B01000000,
  B00100000,
  B00010000,
  B00001000,
  B00000100,
  B00000010,
  B00000001,
  B00000000,
  B11111111,
  B00000000,
  B00000001,
  B00000010,
  B00000100,
  B00001000,
  B00010000,
  B00100000,
  B01000000,
  B10000000,
  B00000001,
  B10000000,
  B01000000,
  B00100000,
  B00010000,
  B00001000,
  B00000100,
  B00000010,
  B00000001,
  B00000000,
  B11111111,
  B00000000,
};

unsigned int pattern_d[] = {
  B00000000,
};
#else  /* 残りLED用Arduino */
/* 緑1, 青2, 黄2 */

/* 何もしてない */
unsigned int pattern_idle[] = {
  B00000,
  B00000,
  B00000,
  B00000,
  B00000,

  B00000,
  B00000,
  B00000,
  B00000,
  B00000,

  B00000,
  B00000,
  B00111,
  B00111,
  B00111,

};

/* 回転中 */
unsigned int pattern_a[] = {
  B11111,
  B11111,
  B11111,
  B11000,
  B11000,
  B11000,

  B11111,
  B11111,
  B11111,
  B11000,
  B11000,
  B11000,

  B11111,
  B11111,
  B11111,
  B11000,
  B11000,
  B11000,

  B11111,
  B11111,
  B11111,
  B11000,
  B11000,
  B11000,

  B11111,
  B11111,
  B11111,
  B11000,
  B11000,
  B11000,

  B11111,
  B11111,
  B11111,
  B11000,
  B11000,
  B11000,

  B11111,
  B11111,
  B11111,
  B11000,
  B11000,
  B11000,

  B11111,
  B11111,
  B11111,
  B11000,
  B11000,
  B11000,

  B11111,
  B11111,
  B11111,
  B11000,
  B11000,
  B11000,

  B11111,
  B11111,
  B11111,
  B11000,
  B11000,
  B11000,

  B11111,
  B11111,
  B11111,
  B11000,
  B11000,
  B11000,

};

/* 結果が出たー */
unsigned int pattern_b[] = {
  B11111,
  B11111,
  B11111,
  B00000,
  B00000,

  B11111,
  B11111,
  B11111,
  B00000,
  B00000,
  B11111,
  B11111,
  B11111,
  B00000,
  B00000,
  B11111,
  B11111,
  B11111,
  B00000,
  B00000,
  B11111,
  B11111,
  B11111,
  B00000,
  B00000,
  B11111,
  B11111,
  B11111,
  B00000,
  B00000,
  B11111,
  B11111,
  B11111,
  B00000,
  B00000,
  B11111,
  B11111,
  B11111,
  B00000,
  B00000,
  B11111,
  B11111,
  B11111,
  B00000,
  B00000,
  B11111,
  B11111,
  B11111,
  B00000,
  B00000,
  B11111,
  B11111,
  B11111,
  B00000,
  B00000,
  B11111,
  B11111,
  B11111,
  B00000,
  B00000,
  B11111,
  B11111,
  B11111,
  B00000,
  B00000,
  B11111,
  B11111,
  B11111,
  B00000,
  B00000,
  B11111,
  B11111,
  B11111,
  B00000,
  B00000,
  B11111,
  B11111,
  B11111,
  B00000,
  B00000,
};

/* ちょっかいボタン */
unsigned int pattern_c[] = {
  B11111,
  B11111,

  B11001,
  B11010,
  B11100,
  B00000,
  B11111,
  B00000,
  B11001,
  B11010,
  B11100,
  B00000,
  B11111,
  B00000,
  B11001,
  B11010,
  B11100,
  B00000,
  B11111,
  B00000,
  B11001,
  B11010,
  B11100,
  B00000,
  B11111,
  B00000,
  B11001,
  B11010,
  B11100,
  B00000,

  B00001,
  B00010,
  B00100,
  B01000,
  B10000,
  B01000,
  B00100,
  B00010,
  B00001,
  B00001,
  B00010,
  B00100,
  B01000,
  B10000,
  B01000,
  B00100,
  B00010,
  B00001,
  B00001,
  B00010,
  B00100,
  B01000,
  B10000,
  B01000,
  B00100,
  B00010,
  B00001,
  B00000,

  B11000,
  B11000,
  B11000,
  B00111,
  B00111,
  B00111,
  B11000,
  B11000,
  B11000,
  B00111,
  B00111,
  B00111,
  B11000,
  B11000,
  B11000,
  B00111,
  B00111,
  B00111,
  B11000,
  B11000,
  B11000,
  B00111,
  B00111,
  B00111,
  B11000,
  B11000,
  B11000,
  B00111,
  B00111,
  B00111,
  B11000,
  B11000,
  B11000,
  B00111,
  B00111,
  B00111,
  B11000,
  B11000,
  B11000,
  B11111,
};

unsigned int pattern_d[] = {
  B00000,
};
#endif

#define pattern_idle_size (sizeof(pattern_idle) / sizeof(int))
#define pattern_a_size (sizeof(pattern_a) / sizeof(int))
#define pattern_b_size (sizeof(pattern_b) / sizeof(int))
#define pattern_c_size (sizeof(pattern_c) / sizeof(int))
#define pattern_d_size (sizeof(pattern_d) / sizeof(int))

void lights_out() {
  /* 全消灯 */
  for (int i = 2; i <= 13; i++) {
    digitalWrite(i, LOW);
  }
  last_pattern = 0;
}

void setup() {
  /* シリアルで使うpin1/2を除いて出力モード */
  for (int i = 2; i <= 13; i++) {
    pinMode(i, OUTPUT);
  }
  lights_out();
  /* シリアル初期化 */
  Serial.begin(9600);
}

void loop() {
  if (Serial.available() > 0) {
    int ch = Serial.read();
    
    if (ch == 'S') {  /* 強制停止 */
      current_point = 0;
      current_pattern = NULL;
      lights_out();
      return;
    } else if (ch == 'A') {
      current_point = 0;
      current_pattern = pattern_a;
      current_size = pattern_a_size;
    } else if (ch == 'B') {
      current_point = 0;
      current_pattern = pattern_b;
      current_size = pattern_b_size;
    } else if (ch == 'C') {
      current_point = 0;
      current_pattern = pattern_c;
      current_size = pattern_a_size;
    } else if (ch == 'D') {
      current_point = 0;
      current_pattern = pattern_d;
      current_size = pattern_b_size;
    }
  }

  if (current_pattern != NULL) {
    unsigned int pattern = current_pattern[current_point];
    //Serial.println(pattern, BIN);

    for (int i = 0; i < (13-2); i++) {
      unsigned int x = bitRead(pattern, i);
      unsigned int y = bitRead(last_pattern, i);
      if (x != y) {
        if (x) {
          digitalWrite(i + 2, HIGH);
        } else {
          digitalWrite(i + 2, LOW);
        }
      }
    }

    last_pattern = pattern;

    current_point++;
    if (current_point >= current_size) {  /* 最後までやった */
      current_point = 0;
      current_pattern = pattern_idle;
      current_size = pattern_idle_size;
    }
    delay(300);
  } else {
    current_point = 0;
    current_pattern = pattern_idle;
    current_size = pattern_idle_size;
  }
}

